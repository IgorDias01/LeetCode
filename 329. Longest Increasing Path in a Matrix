
package wildcardmatching;

import java.util.Arrays;
import java.util.Scanner;


public class WildCardMatching {

 
    public static void main(String[] args) 
    {
       Scanner scan=new Scanner(System.in);
        System.out.println("How mayny matrix you wanna put?");
        int m = scan.nextInt();
        System.out.println("The matrix is divide for what number?");
        int x = scan.nextInt();
        int mx = m*x;
        int Save[]=new int[mx];

        for (int i = 0;i < mx;i++)
        {
       System.out.print("Matrix:");
        Save[i]=scan.nextInt();
     
        }
//       System.out.println(Arrays.toString(Save));
       if (m>x)
       {
           System.out.println("Longest path:");
           System.out.println(m+1);
       }
       else if (x > m)
       {
           System.out.println("Longest path:");
           System.out.println(x+1);
       }
       else if (m==x)
       {
           System.out.println("Longest path:");
           System.out.println(m+1);
       }
}
}

//Link:https://leetcode.com/problems/longest-increasing-path-in-a-matrix/
